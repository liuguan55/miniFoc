

set(project_app "remote_control")
if(${project_app} STREQUAL "remote_control")
        SET(APP_NAME "remote_control")
        add_definitions(-DSTM32F103xB)
        SET(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/STM32F103C8TX_FLASH.ld)
        set(TARGET_MCU STM32F1)

        set(USE_LIBC ON CACHE BOOL "Use LIBC" FORCE)
        set(USE_RTOS_SYSTEM ON CACHE BOOL "Use RTOS" FORCE)
        set(USE_BACKTRACE ON CACHE BOOL "Use BACKTRACE" FORCE)
        set(USE_SHELL ON CACHE BOOL "Use SHELL" FORCE)
        set(USE_UNITTEST ON CACHE BOOL "Use UNITTEST" FORCE)
        set(USE_WIRELESS ON CACHE BOOL "Use WIRELESS" FORCE)
        set(USE_LOG OFF CACHE BOOL "Use LOG" FORCE)

        file(GLOB_RECURSE  APP_SOURCES  project/apps/remoteController/*.*
                                       "project/common/board/remoteController/*.*")
        list(APPEND SOURCES ${APP_SOURCES})
        list(APPEND HEADERS project/apps/remoteController/
                            project/common/board/remoteController/)
elseif(${project_app} STREQUAL "remote_reciver")           
        SET(APP_NAME "remote_reciver")
        add_definitions(-DSTM32G030xx)
        SET(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/STM32G030C8TX_FLASH.ld)
        set(TARGET_MCU STM32G0)

        set(USE_LIBC ON CACHE BOOL "Use LIBC" FORCE)
        set(USE_WIRELESS ON CACHE BOOL "Use WIRELESS" FORCE)

        file(GLOB_RECURSE  APP_SOURCES  project/apps/remoteReciver/*.*
                                       "project/common/board/remoteReciver/*.*")
        list(APPEND SOURCES ${APP_SOURCES})
        list(APPEND HEADERS project/apps/remoteReciver/
                            project/common/board/remoteReciver/)
elseif(${project_app} STREQUAL "miniFoc_F4")
        SET(APP_NAME "miniFoc_F4")
        add_definitions(-DSTM32F405xx)
        SET(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/STM32F405RGTX_FLASH.ld)
        set(TARGET_MCU          STM32F4)

        set(USE_USB ON CACHE BOOL "Use USB" FORCE)
        set(USE_SDCARD ON CACHE BOOL "Use SDCARD" FORCE)
        set(USE_SPI_FLASH ON CACHE BOOL "Use SPI FLASH" FORCE)
        set(USE_LCD ON CACHE BOOL "Use LCD" FORCE)
        set(USE_FATFS ON CACHE BOOL "Use FATFS" FORCE)
        set(USE_LITTLEFS ON CACHE BOOL "Use LITTLEFS" FORCE)
        set(USE_VFS ON CACHE BOOL "Use VFS" FORCE)
        set(USE_RTOS_SYSTEM ON CACHE BOOL "Use RTOS" FORCE)
        set(USE_FOC ON CACHE BOOL "Use FOC" FORCE)
        set(USE_GUI ON CACHE BOOL "Use GUI" FORCE)
        set(USE_LVGL ON CACHE BOOL "Use LVGL" FORCE)
        set(USE_BACKTRACE ON CACHE BOOL "Use BACKTRACE" FORCE)
        set(USE_SHELL ON CACHE BOOL "Use SHELL" FORCE)
        set(USE_UNITTEST ON CACHE BOOL "Use UNITTEST" FORCE)
        set(USE_JSON ON CACHE BOOL "Use JSON" FORCE)
        set(USE_LOG ON CACHE BOOL "Use LOG" FORCE)


        file(GLOB_RECURSE  APP_SOURCES project/apps/BldcController/*.*
                                       "project/common/board/miniFoc_v2/*.*")
        list(APPEND SOURCES ${APP_SOURCES})
        list(APPEND HEADERS "project/common/board/miniFoc_v2"
                            "project/apps/BldcController")
endif()

message(APP_NAME: ${APP_NAME})

if (USE_USB)
        message(STATUS "USE_USB: ${USE_USB}")
        add_definitions(-DUSE_USB)

        file(GLOB_RECURSE USB_SOURCES "src/driver/chip/STM32_USB_Device_Library/*.*"
                                      "src/driver/component/usb/USB_DEVICE/*.*")
        list(APPEND SOURCES ${USB_SOURCES})
        list(APPEND HEADERS     include/driver/chip/STM32_USB_Device_Library/Core
                            include/driver/chip/STM32_USB_Device_Library/Class/CDC
                            include/driver/chip/STM32_USB_Device_Library/Class/MSC
                            include/driver/component/usb/USB_DEVICE/App
                            include/driver/component/usb/USB_DEVICE/Target)
endif   ()


if (USE_SDCARD)
        message(STATUS "USE_SDCARD: ${USE_SDCARD}")
        add_definitions(-DUSE_SDCARD)

endif ()

if (USE_SPI_FLASH)
        message(STATUS "USE_SPI_FLASH: ${USE_SPI_FLASH}")
        add_definitions(-DUSE_SPI_FLASH)

        file(GLOB_RECURSE SPI_FLASH_SOURCES "src/driver/component/sfud/*.*"
                       "project/common/framework/easyFlash/*.*"
            )
        list(APPEND SOURCES        ${SPI_FLASH_SOURCES})
        list(APPEND HEADERS         include/driver/component/flash
                                   include/driver/component/sfud)
endif ()

if (USE_LCD)
        message(STATUS "USE_LCD: ${USE_LCD}")
        add_definitions(-DUSE_LCD)

        file(GLOB_RECURSE LCD_SOURCES "src/driver/component/lcd/*.*")
        list(APPEND SOURCES        ${LCD_SOURCES})
        list(APPEND HEADERS         include/driver/component/lcd)
endif ()

if (USE_WIRELESS)
        message(STATUS "USE_WIRELESS: ${USE_WIRELESS}")
        add_definitions(-DUSE_WIRELESS)

        file(GLOB_RECURSE WIRELESS_SOURCES "src/driver/component/wireless/*.*")
        list(APPEND SOURCES        ${WIRELESS_SOURCES})
        list(APPEND HEADERS         include/driver/component/wireless)
endif ()

if (USE_FATFS)
        message(STATUS "USE_FATFS: ${USE_FATFS}")
        add_definitions(-DUSE_FATFS)

        file(GLOB_RECURSE FATFS_SOURCES "src/fs/fatfs/*.*")
        list(APPEND SOURCES        ${FATFS_SOURCES})
        list(APPEND HEADERS         include/fs/FatFs
                                include/fs/FatFs/Target
                                include/fs/FatFs/App)
endif ()

if (USE_LITTLEFS)
        message(STATUS "USE_LITTLEFS: ${USE_LITTLEFS}")
        add_definitions(-DUSE_LITTLEFS)

        file(GLOB_RECURSE LITTLEFS_SOURCES "src/fs/littlefs/*.*")
        list(APPEND SOURCES        ${LITTLEFS_SOURCES})
        list(APPEND HEADERS         include/fs/littlefs
                                include/fs/littlefs)
endif ()

if (USE_VFS)
        message(STATUS "USE_VFS: ${USE_VFS}")
        add_definitions(-DUSE_VFS)

        file(GLOB_RECURSE VFS_SOURCES "src/fs/vfs/*.*")
        list(APPEND SOURCES        ${VFS_SOURCES})
        list(APPEND HEADERS         include/fs/vfs)
endif ()

if (USE_RTOS_SYSTEM)
        message(STATUS "USE_RTOS_SYSTEM: ${USE_RTOS_SYSTEM}")
        add_definitions(-DUSE_RTOS_SYSTEM)

        file(GLOB_RECURSE FREERTOS_SOURCES "src/kernel/FreeRTOS/Source/CMSIS_RTOS_V2/*.*"
                                           "src/kernel/FreeRTOS/Source/portable/MemMang/*.*"
                                           "src/kernel/FreeRTOS/Source/croutine.c"
                                           "src/kernel/FreeRTOS/Source/event_groups.c"
                                           "src/kernel/FreeRTOS/Source/list.c"
                                           "src/kernel/FreeRTOS/Source/queue.c"
                                           "src/kernel/FreeRTOS/Source/stream_buffer.c"
                                           "src/kernel/FreeRTOS/Source/tasks.c"
                                           "src/kernel/FreeRTOS/Source/timers.c")
        list(APPEND SOURCES        ${FREERTOS_SOURCES})
        list(APPEND HEADERS         include/kernel
                                include/kernel/FreeRTOS
                                include/kernel/FreeRTOS/CMSIS_RTOS_V2)
endif ()

if (USE_FOC)
        message(STATUS "USE_FOC: ${USE_FOC}")
        add_definitions(-DUSE_FOC)

        file(GLOB_RECURSE FOC_SOURCES "project/common/framework/miniFoc/*.*")
        list(APPEND HEADERS        ${FOC_SOURCES})
endif ()

if (USE_GUI)
        message(STATUS "USE_GUI: ${USE_GUI}")
        add_definitions(-DUSE_GUI)

        file(GLOB_RECURSE GUI_SOURCES "project/common/framework/gui/*.*")
        list(APPEND HEADERS        ${GUI_SOURCES})
endif ()

if (USE_LVGL)
        message(STATUS "USE_LVGL: ${USE_LVGL}")
        add_definitions(-DUSE_LVGL)

        file(GLOB_RECURSE LVGL_SOURCES "src/gui/lvgl/*.*")
        list(APPEND SOURCES        ${LVGL_SOURCES})
        list(APPEND HEADERS         include/gui)
endif ()

if (USE_BACKTRACE)
        message(STATUS "USE_BACKTRACE: ${USE_BACKTRACE}")
        add_definitions(-DUSE_BACKTRACE)

        file(GLOB_RECURSE BACKTRACE_SOURCES "src/debug/cm_backtrace/*.*"
                "src/debug/backtrace.c"
                "src/debug/debug.c"
                "src/debug/heap_trace.c")
        list(APPEND SOURCES        ${BACKTRACE_SOURCES})
        list(APPEND HEADERS         include/debug/cm_backtrace)
endif()

if (USE_SHELL)
        message(STATUS "USE_SHELL: ${USE_SHELL}")
        add_definitions(-DUSE_SHELL)

        file(GLOB_RECURSE SHELL_SOURCES "src/console/*.*"
                "project/common/cmd/*.*")
        list(APPEND SOURCES        ${SHELL_SOURCES})
        list(APPEND HEADERS         include/console)
endif()

if (USE_LIBC)
        message(STATUS "USE_LIBC: ${USE_LIBC}")

        SET(COMMON_LDFLAGS "-Wl,--wrap,_malloc_r -Wl,--wrap,_realloc_r -Wl,--wrap,_free_r \
                -Wl,--wrap,gettimeofday -Wl,--wrap,settimeofday -Wl,--wrap,time \
                -Wl,--wrap,exitï¼Œ-Wl,--wrap,printf -Wl,--wrap,vprintf -Wl,--wrap,puts -Wl,--wrap,fprintf \
                -Wl,--wrap,vfprintf -Wl,--wrap,fputs -Wl,--wrap,putchar -Wl,--wrap,putc -Wl,--wrap,fputc \
                -Wl,--wrap,fflush")

        add_definitions(-DUSE_LIBC)
        #add_definitions(-D__CONFIG_MALLOC_MODE=1 -D__CONFIG_MALLOC_TRACE -DHEAP_BACKTRACE)
        add_definitions(-D__CONFIG_MALLOC_MODE=1 )

        file(GLOB_RECURSE LIBC_SOURCES "src/libc/*.*")
        list(APPEND SOURCES        ${LIBC_SOURCES})
        list(APPEND HEADERS         include/libc)
endif()

if (USE_UNITTEST)
        message(STATUS "USE_UNITTEST: ${USE_UNITTEST}")
        add_definitions(-DUSE_UNITTEST)

        file(GLOB_RECURSE UNITTEST_SOURCES "src/test/unity/*.*"
                "project/test/*.*"
                "project/common/framework/UnityManager/*.*")
        list(APPEND SOURCES        ${UNITTEST_SOURCES})
        list(APPEND HEADERS         include/test/unity)
endif()

if (USE_JSON)
        message(STATUS "USE_JSON: ${USE_JSON}")
        add_definitions(-DUSE_JSON)

        file(GLOB_RECURSE JSON_SOURCES "src/util/cjson/*.*")
        list(APPEND SOURCES        ${JSON_SOURCES})
        list(APPEND HEADERS         include/util/cjson)
endif()

if (USE_LOG)
        message(STATUS "USE_LOG: ${USE_LOG}")
        add_definitions(-DUSE_LOG)

        file(GLOB_RECURSE LOG_SOURCES "src/log/*.*")
        list(APPEND SOURCES        ${LOG_SOURCES})
        list(APPEND HEADERS         include/log)
endif()
